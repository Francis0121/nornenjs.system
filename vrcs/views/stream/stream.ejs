<!DOCTYPE html>
<html>
<head lang="ko">
    <meta charset="UTF-8">
    <title>Volume Rendering Cloud System</title>
    <link rel='stylesheet' href='/stylesheets/default.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src='http://cdn.binaryjs.com/0/binary.js'></script>
    <script src='http://112.108.40.165:3000/socket.io/socket.io.js'></script>
    <script src='/javascripts/jquery-1.11.1.min.js'></script>
</head>
<body>

<header class="template_header">
    <h1>Volume Stream</h1>
</header>

<section class="template_section">
    <article>
        <a href="/" class="default_a">Main</a>
        <a href="/volume" class="default_a">Volume List</a>

        <div id="view_port" class="default_stream">
            <img src="" style="width: 512px; height: 512px;"/>
        </div>

        <div class="debug_wrap">

        </div>

        <div class="default_error">
            <% if(error != '') { %>
                <%=error%>
            <% } %>
        </div>

        <div class="default_success">

        </div>

    </article>
</section>

<footer class="template_footer">
    <span>Copyright(c) Teriusbin.lee Francis.kim All rights reserved</span>
</footer>

    <script type="text/javascript">

        var socket = io.connect('http://112.108.40.165:3000'); // Socket.io
        var client = new BinaryClient('ws://' + document.location.host); // Byte streaming

        var accessInfo = {
            volumePn : '<%=accessInfo.volumePn%>',
            userPn : '<%=accessInfo.userPn%>'
        };

        // ~ init room setting
        console.log('accessInfo: ',accessInfo);

        var joinSocket = function(){
            console.log('Request join socket')
            socket.emit('join');
        };

        var requestStream = function(){
            var buffer = new ArrayBuffer(4);
            var dataView = new DataView(buffer);
            dataView.setInt32(0, accessInfo.volumePn);
            client.send(buffer);
        };

        joinSocket();

        socket.on('message', function(data){
            if(!data.success){
                $('.debug_wrap').append('<p>'+data.error+'</p>');
                return;
            }
            // ~ success request byte stre
            $('.default_error').html('');
            requestStream();
        });

        socket.on('user_disconnected', function(data){
            joinSocket();
        });

        var second = 0;
        var count = 0;

        client.on('stream', function(stream, meta){
            // collect stream data
            var parts = [];
            stream.on('data', function(data){
                parts.push(data);
            });

            // when finished, set it as the background image
            stream.on('end', function(){
                var url = (window.URL || window.webkitURL).createObjectURL(new Blob(parts));
                $('#view_port>img').attr('src', url);
                count++;
            });
        });

        // ~ TODO debug 재정의
        var debug = function(){
            $('.debug_wrap').append('<p> sec: '+ second + ' c: ' +count+'</p>');
            second++, count = 0;
        };

        setInterval(debug, 1000);

    </script>
</body>
</html>
