#!/usr/bin/env node

//#######################################
// ~ load module and start server
var fs = require('fs-extra'); // FILE
var path = require('path');
var debug = require('debug')('vrcs');

var Jpeg = require('jpeg').Jpeg; // JPEG
var Png = require('png').Png; // PNG

var app = require('../app');
var http = require('http');
var server = http.createServer(app);
var BinaryServer = require('binaryjs').BinaryServer; // BinaryJs (Byte stream)
var bs = BinaryServer({server : server}); // Start BinaryJs server
var io = require('socket.io').listen(server); // Socket.io
//#######################################


// TODO Deprcated Here load file and make queue multiple user
var queue = [];
queue.push(fs.readFileSync(path.join(__dirname, '../public/upload/[2014-11-27 20:00:00]_head2.den')));
queue.push(fs.readFileSync(path.join(__dirname, '../public/upload/03_test.den')));
queue.push(fs.readFileSync(path.join(__dirname, '../public/upload/05_test.den')));

var standard_frame = [ 30, 25, 20, 15, 10 ];
var volumeInterval;
var volumeFrame = standard_frame[0];


//#######################################
// ~ Wait for new user connections ( Implement Byte stream )
bs.on('connection', function(client){

    client.on('stream', function(stream, meta){

        var part = [];

        stream.on('data', function(data){
            part.push(data);
        });

        stream.on('end', function(){
            var volumePn = part[0].readInt32BE(0);
            var volume = app.volumeMap.get(volumePn);

            if(volume == undefined){
                console.log('volume index not exist');
                return;
            }else{
                var sender = function() {
                    // TODO selection png or jpeg ( make this part function)
                    var jpeg = new Jpeg(queue[volumePn], 512, 512, 'rgba');
                    jpeg.encode(function(jpeg_img){
                        client.send(jpeg_img)
                    });
/*
                    var png = new Png(queue[0], 512, 512, 'rgba');
                    png.encode(function(png_image){
                        client.send(png_image);
                    });
*/
                };

                volumeInterval = setInterval(sender, volumeFrame);
            }
        });
    });

    client.on('close', function(stream, meta){
        clearInterval(volumeInterval);
    });

});
//#######################################



//#######################################
// ~ socket bind message ( Implement socket room )

var socket_queue = [];
var totalCount = 0;

io.sockets.on('connection', function(socket){

    socket.on('join', function(data){
        console.log('id : ' + socket.id);
        var message = {
            error : '',
            success : false
        };
        if(totalCount < 3){
            totalCount++;
            message.success = true;
        }else{
            socket_queue.push(socket.id);
            message.error = 'Visitor limit';
        }
        console.log('connect total count[ ' + totalCount + ' ]');
        socket.emit('message', message);
    });

    socket.on('disconnect', function () {
        totalCount--;
        console.log('disconnect total count[ ' + totalCount + ' ]');
        var clientId = socket_queue.shift();
        if(clientId != undefined){
            socket.broadcast.to(clientId).emit('user_disconnected');
        }
    });

});
//#######################################

// ~ server start
app.set('port', process.env.PORT || 3000);
var server = server.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});