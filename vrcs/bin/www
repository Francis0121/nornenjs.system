#!/usr/bin/env node

var ENUMS = require('../nornenjs/lib/enums');
var logger = require('../nornenjs/lib/logger');

//#######################################
// ~ load module and start server

var debug = require('debug')('vrcs');
var app = require('../app');
var http = require('http');
var server = http.createServer(app);

var io = require('socket.io').listen(server);
//#######################################

require('../nornenjs/lib/server');

//#######################################
// ~ socket bind message ( Implement socket room )

var socket_queue = [];
var streamUserCount = 0;

io.sockets.on('connection', function(socket){

    socket.on('join', function(){
        var clientId = socket.id;
        var message = {
            error : '',
            success : false,
            clientId : clientId
        };

        if(streamUserCount < 3){
            streamUserCount++;
            message.success = true;
        }else{
            socket_queue.push(clientId);
            message.error = 'Visitor limit';
        }

        //console.log('connect total count[ ' + streamUserCount + ' ] , socket id : ' + clientId);
        socket.emit('message', message);
    });

    socket.on('disconnect', function () {
        streamUserCount--;
        var clientId = socket_queue.shift();
        //console.log('disconnect total count[ ' + streamUserCount + ' ] , sockey id : ' + clientId);
        if(clientId != undefined){
            socket.broadcast.to(clientId).emit('user_disconnected');
        }
    });

});
//#######################################

// ~ server start
app.set('port', process.env.PORT || 3000);
var server = server.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});

//var _cuCtx = this.cuCtx;
//_cuCtx.synchronize(function(error) {
//    _cuCtx.destroy();
//    console.log('[INFO_CUDA] cuCtx.synchronize', error);
//});