#!/usr/bin/env node
var debug = require('debug')('vrcs');
var app = require('../app');
var http = require('http');
// ~ binary js
var BinaryServer = require('binaryjs').BinaryServer;
var server = http.createServer(app);
// ~ socket io
var io = require('socket.io').listen(server);

// ~ Start Binary.js server
var bs = BinaryServer({server : server});
// Wait for new user connections
bs.on('connection', function(client){
    // Incoming stream from browsers
    client.on('stream', function(stream, meta){
        var volumes = app.volumes;
        for(var i=0; i<volumes.length; i++){
            var volume = volumes[i];
            console.log(volume.pn +': '+ volume.file_name + ': ' + volume.save_name);
        }
        // brozadcast to all other clients
        console.log(client.id);
        for(var id in bs.clients){
            if(bs.clients.hasOwnProperty(id)){
                var otherClient = bs.clients[id];
                if(otherClient != client){
                    var send = otherClient.createStream(meta);
                    stream.pipe(send);
                }
            }
        }
    });
});

// ~ socket bind message
io.sockets.on('connection', function(socket){

    socket.on('join', function(data){
        var message = {
            error : '',
            success : false
        };
        var totalClientsCount = io.sockets.server.eio.clientsCount;

        if(totalClientsCount < 4){
            // findClientsSocketByRoomId(data.room);
            socket.join(data.room);
            message.success = true;
        }else{
            message.error = 'Visitor limit';
        }

        socket.emit('message', message);
    });

});

app.set('port', process.env.PORT || 3000);
var server = server.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});

// ~ util function
function findClientsSocketByRoomId(roomId) {
    var res = []
        , room = io.sockets.adapter.rooms[roomId];
    if (room) {
        for (var id in room) {
            res.push(io.sockets.adapter.nsp.connected[id]);
        }
    }
    return res;
}